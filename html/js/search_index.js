var search_data = {"index":{"searchIndex":["tilebag","tilegroup","tilerack","word","append()","draw_tile()","empty?()","hand()","has_tiles_for?()","new()","new()","new()","new()","number_of_tiles_needed()","points_for()","remove()","remove_word()","score()","tiles()"],"longSearchIndex":["tilebag","tilegroup","tilerack","word","tilegroup#append()","tilebag#draw_tile()","tilebag#empty?()","tilegroup#hand()","tilerack#has_tiles_for?()","tilebag::new()","tilegroup::new()","tilerack::new()","word::new()","tilerack#number_of_tiles_needed()","tilebag::points_for()","tilegroup#remove()","tilerack#remove_word()","word#score()","tilegroup#tiles()"],"info":[["TileBag","","TileBag.html","","<p>This class represents a tile bag of scrabble tiles\n"],["TileGroup","","TileGroup.html","","<p>This is the parent class TileGroup of the TileRack and Word Classes It\nembodies group of tiles\n"],["TileRack","","TileRack.html","",""],["Word","","Word.html","",""],["append","TileGroup","TileGroup.html#method-i-append","(tile)","<p>append method adds a tile as symbol to the group\n"],["draw_tile","TileBag","TileBag.html#method-i-draw_tile","()","<p>draws a single tile bag and returns it\n"],["empty?","TileBag","TileBag.html#method-i-empty-3F","()","<p>determines if the tile bag is empty\n"],["hand","TileGroup","TileGroup.html#method-i-hand","()","<p>returns a string representation of the tile group array\n"],["has_tiles_for?","TileRack","TileRack.html#method-i-has_tiles_for-3F","(text)","\n<pre class=\"ruby\"><span class=\"ruby-identifier\">this</span> <span class=\"ruby-identifier\">method</span> <span class=\"ruby-identifier\">returns</span> <span class=\"ruby-keyword\">true</span> <span class=\"ruby-keyword\">if</span> <span class=\"ruby-identifier\">rack</span> <span class=\"ruby-identifier\">has</span> <span class=\"ruby-identifier\">enough</span>\n</pre>\n<p>letters to make the input text parameter\n\n<pre>since only 7 letters ...</pre>\n"],["new","TileBag","TileBag.html#method-c-new","()",""],["new","TileGroup","TileGroup.html#method-c-new","()","<p>Array used to store tiles\n"],["new","TileRack","TileRack.html#method-c-new","()","<p>subclass constructor\n"],["new","Word","Word.html#method-c-new","()","<p>subclass constructor\n"],["number_of_tiles_needed","TileRack","TileRack.html#method-i-number_of_tiles_needed","()","<p>this method returns the number of tiles needed to fill the  rack to upto 7\ntiles\n"],["points_for","TileBag","TileBag.html#method-c-points_for","(tile)","<p>class method which returns the score for a given tile\n"],["remove","TileGroup","TileGroup.html#method-i-remove","(tile)","<p>remvoes a single tile from the TileGroup checks if the array contains the\ntile\n"],["remove_word","TileRack","TileRack.html#method-i-remove_word","(text)","<p>method to remove text from tile rack and making a Word Word is returned\n"],["score","Word","Word.html#method-i-score","()","<p>this class returns the score for the Word object the TileBag class is used\nto call the points_for method â€¦\n"],["tiles","TileGroup","TileGroup.html#method-i-tiles","()","<p>attr accessor to return the tiles\n"]]}}